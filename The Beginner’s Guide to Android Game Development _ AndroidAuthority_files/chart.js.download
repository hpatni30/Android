
function buildChart(config,echo) {
    var type        = config.type           || 'horizontalBar',
        data        = config.data,
        appendTo    = config.appendTo,
        maxTicks    = parseFloat(config.data.max)===0?0:parseFloat(config.data.max) || undefined ,
        minTicks    = parseFloat(config.data.min)===0?0:parseFloat(config.data.min) || undefined ,
        stepSizeTicks = parseFloat(config.data.step)===0?0:parseFloat(config.data.step) || undefined;

    var scales = {};
    if(config.type === 'horizontalBar'){
        scales = {
            xAxes: [{
                scaleLabel: {
                    display: true,
                    labelString: data.data[0]['units']
                },
                ticks: {
                    max: maxTicks,
                    min: minTicks,
                    stepSize: stepSizeTicks
                }
            }]
        };
    }else {
        scales = {
            yAxes: [{
                scaleLabel: {
                    display: true,
                    labelString: data.data[0]['units']
                },
                ticks: {
                    max: maxTicks,
                    min: minTicks,
                    stepSize: stepSizeTicks
                }
            }]
        };
    }

    const pattern = document.createElement('canvas');
    const patternContext = pattern.getContext('2d');

    function chart(image) {
        new Chart(appendTo, {
            type: type,
            data: {
                labels: data.labels,

                datasets: data.data.map(function(dataset,datasetsKey)  {

                    var dataset_option = {};
                    var score = {
                        data: dataset.score
                    };
                    if(config.type === 'line'){

                        dataset_option = {
                            lineTension: 0,
                            borderColor: data.characteristics_colors[datasetsKey],
                            pointBorderColor: data.characteristics_colors[datasetsKey],
                            pointBackgroundColor: data.characteristics_colors[datasetsKey],
                            backgroundColor: "rgba(0,0,0,0)",
                        };

                        if(config.data.tension === 'on'){
                            dataset_option.lineTension = 0.3
                        }

                    }else{

                        if(data.data.length > 1){
                            dataset_option = {
                                backgroundColor: data.characteristics_colors[datasetsKey],
                                borderWidth: 0
                            };
                        }else {
                            dataset_option = {
                                backgroundColor: data.patterns.map(function(pattern,imageKey){
                                    if(pattern.trim().startsWith('#')){
                                        return pattern;
                                    }
                                    return patternContext.createPattern(functionPatterns[pattern](data.characteristics_colors[datasetsKey]), 'repeat');
                                }),
                                borderWidth: 0
                            };
                        }
                    }

                    return Object.assign(dataset_option, score);
                })
            },
            options: {
                scales: scales,
                watermark: {
                    image: image.src || '',
                    width: image.width || 0,
                    height:image.height || 0,
                    x: 20,
                    y: 45,
                    opacity: 0.4,
                    alignX: "right",
                    alignY: "bottom",
                    position: "front",
                },

                legend: {
                    display: true,
                    labels: {
                        generateLabels: function(chart){
                            return data.data.map(function(item,i) {
                                return {
                                    text:  item.label,
                                    fillStyle: data.data.length>1?data.characteristics_colors[i]:'rgba(0, 0, 0, 0)',
                                    lineWidth: 0
                                }
                            });
                        }
                    }
                },

                tooltips: {
                    displayColors: false,
                    callbacks: {
                        label: function(tooltipItems) {
                            var axis = 'yLabel';
                            if(config.type === 'horizontalBar'){
                                axis = 'xLabel';
                            }
                            return tooltipItems[axis] + ' ' + data.data[tooltipItems.datasetIndex]['units'];
                        }
                    }
                },
            }
        });
    }

    if(config.defaults.watermark_url){
        var image = new Image();
        image.src = config.defaults.watermark_url;
        var widthImage = config.defaults.width_watermark || 0;
        var heightImage = config.defaults.height_watermark || 0;
        var proportional;

        image.onload = function() {
            if(image.width > image.height){
                if(image.width > widthImage){
                    proportional = widthImage / image.width;
                    image.width = widthImage;
                    image.height = image.height*proportional;
                }
            }else if(image.height > image.width){
                if(image.height > heightImage){
                    proportional = heightImage / image.height;
                    image.height = heightImage;
                    image.width = image.width*proportional;
                }
            }

            chart(image);
         };

    }else {
        chart({});
    }
}
(function($) {
    $( document ).ready( function() {
        $reviews = $( document ).find('.reviews');
        $.each( $reviews, function( i, review ) {
            var $review = $(review);
            var data    = JSON.parse(window.decodeURIComponent($review.data('reviews-data')));
            var type    = JSON.parse(window.decodeURIComponent($review.data('reviews-type')));
            buildChart({
                data:data,
                type:type,
                appendTo:review,
                defaults: AA_reviews_config,
            });
        });
    });
})(jQuery);
